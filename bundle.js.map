{"version":3,"file":"bundle.js","mappings":"yIAAA,eAEA,MAAaA,EACH,iBAAOC,CAAWC,GACxB,MAAMC,EAAUC,SAASC,cAAcH,GACvC,GAAgB,OAAZC,EACF,MAAM,IAAIG,MAAM,WAAWJ,yBAE7B,OAAOC,CACT,CAEA,qBAAOI,CAAeL,GACpB,MAAMC,EAAUC,SAASI,iBAAiBN,GAC1C,GAAgB,OAAZC,EACF,MAAM,IAAIG,MAAM,WAAWJ,yBAE7B,OAAOC,CACT,EAfF,e,IAiBgB,EAAAM,eAAiB,EAAKR,WAClC,EAAAS,SAASC,0BAGG,EAAAC,YAAc,EAAKX,WAC/B,EAAAS,SAASG,uBAGG,EAAAC,UAAY,EAAKb,WAC7B,EAAAS,SAASK,qBAGG,EAAAC,eAAiB,EAAKf,WAClC,EAAAS,SAASO,0BAGG,EAAAC,eAAiB,EAAKjB,WAClC,EAAAS,SAASS,0BAGG,EAAAC,YAAc,IAAM,EAAKb,eAAe,EAAAG,SAASW,eAEjD,EAAAC,MAAQ,EAAKrB,WAAW,EAAAS,SAASa,gBAEjC,EAAAC,iBAAmB,EAAKvB,WACpC,EAAAS,SAASe,6BAGG,EAAAC,YAAc,EAAKzB,WAAW,EAAAS,SAASiB,uBAEvC,EAAAC,aAAe,EAAK3B,WAAW,EAAAS,SAASmB,wBAExC,EAAAC,WAAa,EAAK7B,WAAW,EAAAS,SAASqB,qBAEtC,EAAAC,mBAAqB,EAAK/B,WACtC,EAAAS,SAASuB,8B,cCtDb,IAAYC,E,qEAAZ,SAAYA,GACV,QACA,QACA,UACD,CAJD,CAAYA,IAAU,aAAVA,EAAU,I,+ECAtB,eACA,SACA,SACA,SAEA,aAYE,WAAAC,CAAoBb,EAAQ,IAAI,EAAAc,OAAZ,KAAAd,MAAAA,EAXZ,KAAAe,MAAwB,GACxB,KAAAC,cAA4B,EAAAJ,WAAWK,MAG9B,KAAAC,aAAe,EAAAxC,WAAWS,eAC1B,KAAAgC,mBAAqB,EAAAzC,WAAWY,YAChC,KAAA8B,iBAAmB,EAAA1C,WAAWc,UAC9B,KAAA6B,sBAAwB,EAAA3C,WAAWgB,eACnC,KAAA4B,sBAAwB,EAAA5C,WAAWkB,eACnC,KAAA2B,0BAA4B,EAAA7C,WAAWgC,mBAyNhD,KAAAc,iBAAoBC,IAC1BA,EAAMC,iBACN,MAAMC,EAASF,EAAME,OACfC,GAAOD,EAAOE,QAAQC,EACtBC,GAAOJ,EAAOE,QAAQG,EAC5BC,KAAKC,SAASN,EAAKG,EAAKJ,EAAO,EA3N/BM,KAAKE,UAAYF,KAAKG,0BACtBH,KAAKI,iBACLJ,KAAKK,kBACLL,KAAKM,4BACLN,KAAKO,wBAAwBP,KAAKQ,qBAClCR,KAAKS,OACP,CAGQ,cAAAL,GACFJ,KAAKb,mBACPa,KAAKb,iBAAiBuB,MAAQV,KAAKE,UAAUS,WAC7CX,KAAKZ,sBAAsBwB,iBAAiB,SAAS,KAC/CZ,KAAKE,UAAY,EAAA/C,SAAS0D,iBAC5Bb,KAAKE,YACLF,KAAKb,iBAAiBuB,MAAQV,KAAKE,UAAUS,WAC7CX,KAAKc,WAAWd,KAAKb,iBAAiBuB,QAExCV,KAAKe,oBAAoB,IAE3Bf,KAAKX,sBAAsBuB,iBAAiB,SAAS,KAC/CZ,KAAKE,UAAY,EAAA/C,SAAS6D,iBAC5BhB,KAAKE,YACLF,KAAKb,iBAAiBuB,MAAQV,KAAKE,UAAUS,WAC7CX,KAAKc,WAAWd,KAAKb,iBAAiBuB,QAExCV,KAAKe,oBAAoB,IAE3Bf,KAAKe,qBAET,CAEQ,eAAAV,GACNL,KAAKd,mBAAmB0B,iBAAiB,SAAS,IAAMZ,KAAKS,SAC/D,CAGO,KAAAA,GAKL,GAJAT,KAAKjB,cAAgB,EAAAJ,WAAWsC,EAChCjB,KAAKlB,MAAQoC,MAAMC,KAAK,CAAEC,OAAQpB,KAAKE,YAAa,IAClDgB,MAAMC,KAAK,CAAEC,OAAQpB,KAAKE,YAAa,IAAM,EAAAvB,WAAWK,UAEtDgB,KAAKf,aAAc,CACrB,MAAMoC,EAAQ,EAAA5E,WAAWoB,cACzB,IAAK,MAAMyD,KAAQD,EACjBC,EAAKC,YAAc,EAEvB,CACAvB,KAAKf,aAAauC,oBAAoB,YAAaxB,KAAKT,kBACxDS,KAAKf,aAAa2B,iBAAiB,YAAaZ,KAAKT,kBAErDS,KAAKyB,mBACP,CAGQ,iBAAAA,GACN,GAAIzB,KAAKf,aAAc,CACrBe,KAAKf,aAAayC,UAAY,GAC9B1B,KAAKf,aAAa0C,MAAMC,iBAAmB,UAAU5B,KAAKE,kBAC1DF,KAAKf,aAAa0C,MAAME,oBAAsB,UAAU7B,KAAKE,kBAC7DF,KAAKf,aAAa0C,MAAMG,YACtB,cACA9B,KAAKE,UAAUS,YAEjB,MAAMoB,EAAWlF,SAASmF,yBAC1B,IAAK,IAAIrC,EAAM,EAAGA,EAAMK,KAAKE,UAAWP,IACtC,IAAK,IAAIG,EAAM,EAAGA,EAAME,KAAKE,UAAWJ,IACtCiC,EAASE,OAAOjC,KAAKkC,mBAAmBvC,EAAKG,IAGjDE,KAAKf,aAAagD,OAAOF,EAC3B,CACF,CAGQ,kBAAAG,CAAmBvC,EAAaG,GACtC,MAAMqC,EAAetF,SAASuF,cAAc,OAU5C,OATAD,EAAaE,UAAUC,IAAI,QACvB3C,EAAMK,KAAKE,UAAY,GACzBiC,EAAaE,UAAUC,IAAI,sBAEzBxC,EAAME,KAAKE,UAAY,GACzBiC,EAAaE,UAAUC,IAAI,qBAE7BH,EAAavC,QAAQC,EAAIF,EAAIgB,WAC7BwB,EAAavC,QAAQG,EAAID,EAAIa,WACtBwB,CACT,CAEQ,kBAAApB,GACNf,KAAKZ,sBAAsBmD,SACzBvC,KAAKE,WAAa,EAAA/C,SAAS0D,eAC7Bb,KAAKX,sBAAsBkD,SACzBvC,KAAKE,WAAa,EAAA/C,SAAS6D,cAC/B,CAGQ,UAAAF,CAAW0B,GACjB,MAAMC,EAAaC,OAAOC,SAASH,EAAS,KAEzCE,OAAOE,MAAMH,IACdA,GAAc,EAAAtF,SAAS0D,gBACvB4B,GAAc,EAAAtF,SAAS6D,iBAEvBhB,KAAKE,UAAYuC,EACjBI,aAAaC,QAAQ,YAAa9C,KAAKE,UAAUS,YACjDX,KAAKS,QAET,CAEO,QAAAR,CAASN,EAAaoD,EAAgBrD,GAC3C,OACEC,EAAM,GACNA,GAAOK,KAAKE,WACZ6C,EAAS,GACTA,GAAU/C,KAAKE,WAEf8C,QAAQC,MAAM,mCACP,GAELjD,KAAKlB,MAAMa,GAAKoD,KAAY,EAAApE,WAAWK,OACzCgB,KAAKjC,MAAMmF,UAAU,0BACd,IAGTxD,EAAO6B,YAAcvB,KAAKjB,cAC1BW,EAAO2C,UAAUC,IAAItC,KAAKjB,eAC1BiB,KAAKlB,MAAMa,GAAKoD,GAAU/C,KAAKjB,cAC3BiB,KAAKmD,eACPnD,KAAKf,aAAauC,oBAAoB,YAAaxB,KAAKT,kBACxDS,KAAKoD,eAAepD,KAAKjB,eACzBiB,KAAKjC,MAAMmF,UACT,SAASlD,KAAKjB,0BACd,EACAiB,KAAKS,MAAM4C,KAAKrD,QAEX,GAELA,KAAKsD,aACPtD,KAAKf,aAAauC,oBAAoB,YAAaxB,KAAKT,kBACxDS,KAAKoD,eAAe,QACpBpD,KAAKjC,MAAMmF,UAAU,SAAS,EAAMlD,KAAKS,MAAM4C,KAAKrD,QAC7C,IAETA,KAAKuD,gBACE,GACT,CAEQ,WAAAJ,GACN,MAAMK,EACJxD,KAAKyD,mBACLzD,KAAK0D,iBACL1D,KAAK2D,qBACL3D,KAAK4D,sBAEP,QAAIJ,IACFxD,KAAK6D,sBAAsBL,IACpB,EAGX,CAEQ,SAAAF,GACN,OAAOtD,KAAKlB,MAAMgF,OAAOC,OAAOzC,GAASA,IAAS,EAAA3C,WAAWK,OAC/D,CAEQ,SAAAgF,CAAUC,GAChB,OAAOA,EAAKF,OAAOzC,GAASA,IAAS,EAAA3C,WAAWK,OAASsC,IAAS2C,EAAK,IACzE,CAEQ,eAAAR,GACN,IAAK,IAAI9D,EAAM,EAAGA,EAAMK,KAAKE,UAAWP,IACtC,GAAIK,KAAKgE,UAAUhE,KAAKlB,MAAMa,IAC5B,OAAOK,KAAKlB,MAAMa,GAAKuE,KAAI,CAACC,EAAGrE,IAAQ,CAACH,EAAKG,KAGjD,OAAO,IACT,CAEQ,aAAA4D,GACN,IAAK,IAAI5D,EAAM,EAAGA,EAAME,KAAKE,UAAWJ,IAAO,CAC7C,MAAMuB,EAAQrB,KAAKlB,MAAMoF,KAAKvE,GAAQA,EAAIG,KAC1C,GAAIE,KAAKgE,UAAU3C,GACjB,OAAOA,EAAM6C,KAAI,CAACC,EAAGxE,IAAQ,CAACA,EAAKG,IAEvC,CACA,OAAO,IACT,CAEQ,iBAAA6D,GACN,MAAMS,EAA6B,GACnC,IAAK,IAAIC,EAAQ,EAAGA,EAAQrE,KAAKE,UAAWmE,IAC1CD,EAAaE,KAAKtE,KAAKlB,MAAMuF,GAAOA,IAEtC,OAAOrE,KAAKgE,UAAUI,GAClBA,EAAaF,KAAI,CAACC,EAAGE,IAAU,CAACA,EAAOA,KACvC,IACN,CAEQ,mBAAAT,GACN,MAAMW,EAA+B,GACrC,IAAK,IAAIF,EAAQ,EAAGA,EAAQrE,KAAKE,UAAWmE,IAC1CE,EAAeD,KAAKtE,KAAKlB,MAAMuF,GAAOrE,KAAKE,UAAYmE,EAAQ,IAEjE,OAAOrE,KAAKgE,UAAUO,GAClBA,EAAeL,KAAI,CAACC,EAAGE,IAAU,CAACA,EAAOrE,KAAKE,UAAYmE,EAAQ,KAClE,IACN,CAEQ,YAAAd,GACNvD,KAAKjB,cACHiB,KAAKjB,gBAAkB,EAAAJ,WAAWsC,EAAI,EAAAtC,WAAW6F,EAAI,EAAA7F,WAAWsC,CACpE,CAUQ,uBAAAd,GACN,MAAMsE,EAAa5B,aAAa6B,QAAQ,aACxC,OAAOD,EACH/B,OAAOC,SAAS8B,EAAY,IAC5B,EAAAtH,SAAS0D,cACf,CAEQ,cAAAuC,CAAeuB,GACrB,MAAMC,EAAW,iBACjB,IAAIC,EAA2B,GAE/B,IACEA,EAAiBC,KAAKC,MAAMlC,aAAa6B,QAAQE,IAAa,KAChE,CAAE,MAAO3B,GACPD,QAAQC,MAAM,4CAA6CA,GAC3D4B,EAAiB,EACnB,CAEIA,EAAezD,QAAU,IAC3ByD,EAAeG,QAGb9D,MAAM+D,QAAQJ,IAChBA,EAAeP,KAAKK,GAEtB9B,aAAaC,QAAQ8B,EAAUE,KAAKI,UAAUL,IAC9C7E,KAAKO,wBAAwBsE,EAC/B,CAEQ,iBAAArE,GACN,IACE,OAAOsE,KAAKC,MAAMlC,aAAa6B,QAAQ,mBAAqB,KAC9D,CAAE,MAAOzB,GAEP,OADAD,QAAQC,MAAM,4CAA6CA,GACpD,EACT,CACF,CAEQ,uBAAA1C,CAAwBhC,GAC9B,MAAM4G,EAAoB,EAAA1I,WAAW8B,WACjC4G,GAAqBjE,MAAM+D,QAAQ1G,KACrC4G,EAAkBzD,UAAYnD,EAC3B2F,KAAI,CAACS,EAAQN,IAGL,GAAGA,EAAQ,MADL,SAAXM,EAAoB,QAAU,SAASA,gBAG1CS,KAAK,QAEZ,CAEQ,yBAAA9E,GACNN,KAAKV,0BAA0BsB,iBAAiB,SAAS,IACvDZ,KAAKqF,mBAET,CAEQ,eAAAA,GACNxC,aAAayC,WAAW,kBACxBtF,KAAKO,wBAAwB,GAC/B,CAEQ,qBAAAsD,CAAsBxC,GAC5B,MAAMkE,EAAW,YAAYvF,KAAKjB,gBAClCsC,EAAMmE,SAAQ,EAAE7F,EAAKG,MACnB,MAAMwB,EAAOzE,SAASC,cACpB,iBAAiB6C,eAAiBG,OAEhCwB,GACFA,EAAKe,UAAUC,IAAIiD,EACrB,GAEJ,E,gFCxTF,eAEA,cAME,WAAA3G,GALQ,KAAAb,MAAQ,EAAAtB,WAAWsB,MACnB,KAAAE,iBAAmB,EAAAxB,WAAWwB,iBAC9B,KAAAE,YAAc,EAAA1B,WAAW0B,YACzB,KAAAE,aAAe,EAAA5B,WAAW4B,aAM1B,KAAAoH,UAAY,KAClBzF,KAAKjC,MAAM4D,MAAM+D,QAAU,MAAM,EAJjC1F,KAAK2F,WACP,CAMQ,SAAAA,GACN3F,KAAK/B,iBAAiB2C,iBAAiB,QAASZ,KAAKyF,WACrDG,OAAOhF,iBAAiB,SAAUpB,IAC5BA,EAAME,SAAWM,KAAKjC,OACxBiC,KAAKyF,WACP,IAEFG,OAAOhF,iBAAiB,WAAYpB,IAChB,WAAdA,EAAMqG,KACR7F,KAAKyF,WACP,GAEJ,CAEO,SAAAvC,CACL4C,EACAC,EACAC,GAEAhG,KAAKiG,aACLjG,KAAK3B,aAAakD,YAAcuE,EAChC9F,KAAKjC,MAAM4D,MAAM+D,QAAU,QAC3B1F,KAAK7B,YAAYyC,iBAAiB,QAASZ,KAAKyF,WAE5CM,GAAWC,IACbhG,KAAK7B,YAAYoD,YAAc,aAC/BvB,KAAK7B,YAAYyC,iBAAiB,QAASoF,GAE/C,CAEQ,UAAAC,GACNjG,KAAK7B,YAAYoD,YAAc,KAC/B,MAAM2E,EAAiBlG,KAAK7B,YAAYgI,WAAU,GAClDnG,KAAK7B,YAAYiI,YAAYF,GAC7BlG,KAAK7B,YAAc+H,CACrB,E,iFCnDF,MAAa/I,GAAb,aACyB,EAAAC,yBAA2B,mBAC3B,EAAAU,cAAgB,QAChB,EAAAR,sBAAwB,gBACxB,EAAAE,oBAAsB,cACtB,EAAAE,yBAA2B,YAC3B,EAAAE,yBAA2B,YAC3B,EAAAI,eAAiB,SACjB,EAAAE,4BAA8B,eAC9B,EAAAE,sBAAwB,gBACxB,EAAAE,uBAAyB,iBACzB,EAAAE,oBAAsB,cACtB,EAAAE,8BACrB,2BAEqB,EAAAmC,eAAiB,EACjB,EAAAG,eAAiB,C,GCftCqF,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,CAAC,GAOX,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,OACf,CCrBAJ,EAAoBO,EAAKH,IACH,oBAAXI,QAA0BA,OAAOC,aAC1CC,OAAOC,eAAeP,EAASI,OAAOC,YAAa,CAAErG,MAAO,WAE7DsG,OAAOC,eAAeP,EAAS,aAAc,CAAEhG,OAAO,GAAO,E,MCL9D,eACA,OAEA7D,SAAS+D,iBAAiB,oBAAoB,KAC5C,IAAI,EAAAsG,IAAM,G","sources":["webpack://tic-tac-toe/./src/dom.service.ts","webpack://tic-tac-toe/./src/game-cell.ts","webpack://tic-tac-toe/./src/game.ts","webpack://tic-tac-toe/./src/modal.ts","webpack://tic-tac-toe/./src/settings.ts","webpack://tic-tac-toe/webpack/bootstrap","webpack://tic-tac-toe/webpack/runtime/make namespace object","webpack://tic-tac-toe/./src/index.ts"],"sourcesContent":["import { Settings } from './settings';\n\nexport class DomService {\n  private static getElement(selector: string): HTMLElement {\n    const element = document.querySelector(selector);\n    if (element === null) {\n      throw new Error(`Element ${selector} is missing from DOM`);\n    }\n    return element as HTMLElement;\n  }\n\n  static getAllElements(selector: string): NodeListOf<HTMLElement> {\n    const element = document.querySelectorAll(selector);\n    if (element === null) {\n      throw new Error(`Element ${selector} is missing from DOM`);\n    }\n    return element as NodeListOf<HTMLElement>;\n  }\n\n  public static boardContainer = this.getElement(\n    Settings.SELECTOR_BOARD_CONTAINER,\n  );\n\n  public static resetButton = this.getElement(\n    Settings.SELECTOR_RESET_BUTTON,\n  ) as HTMLButtonElement;\n\n  public static sizeInput = this.getElement(\n    Settings.SELECTOR_SIZE_INPUT,\n  ) as HTMLInputElement;\n\n  public static decreaseButton = this.getElement(\n    Settings.SELECTOR_DECREASE_BUTTON,\n  ) as HTMLButtonElement;\n\n  public static increaseButton = this.getElement(\n    Settings.SELECTOR_INCREASE_BUTTON,\n  ) as HTMLButtonElement;\n\n  public static getAllCells = () => this.getAllElements(Settings.SELECTOR_CELL);\n\n  public static modal = this.getElement(Settings.SELECTOR_MODAL);\n\n  public static modalCloseButton = this.getElement(\n    Settings.SELECTOR_MODAL_CLOSE_BUTTON,\n  );\n\n  public static modalButton = this.getElement(Settings.SELECTOR_MODAL_BUTTON);\n\n  public static modalMessage = this.getElement(Settings.SELECTOR_MODAL_MESSAGE);\n\n  public static statistics = this.getElement(Settings.SELECTOR_STATISTICS);\n\n  public static clearStatisticsBtn = this.getElement(\n    Settings.SELECTOR_CLEAR_STATISTICS_BTN,\n  ) as HTMLButtonElement;\n}\n","export enum CellStatus {\n  X = 'X',\n  O = 'O',\n  EMPTY = '',\n}\n","import { Settings } from './settings';\nimport { DomService } from './dom.service';\nimport { CellStatus } from './game-cell';\nimport { Modal } from './modal';\n\nexport class Game {\n  private board: CellStatus[][] = [];\n  private currentPlayer: CellStatus = CellStatus.EMPTY;\n  private boardSize: number;\n\n  private readonly boardElement = DomService.boardContainer;\n  private readonly resetButtonElement = DomService.resetButton;\n  private readonly sizeInputElement = DomService.sizeInput;\n  private readonly decreaseButtonElement = DomService.decreaseButton;\n  private readonly increaseButtonElement = DomService.increaseButton;\n  private readonly clearStatisticsBtnElement = DomService.clearStatisticsBtn;\n\n  constructor(private modal = new Modal()) {\n    this.boardSize = this.getSizeFromLocalStorage();\n    this.initInputField();\n    this.initResetButton();\n    this.initClearStatisticsButton();\n    this.updateStatisticsDisplay(this.getGameStatistics());\n    this.reset();\n  }\n\n  /** Инициализация поля ввода и установка обработчика событий */\n  private initInputField(): void {\n    if (this.sizeInputElement) {\n      this.sizeInputElement.value = this.boardSize.toString();\n      this.decreaseButtonElement.addEventListener('click', () => {\n        if (this.boardSize > Settings.MIN_BOARD_SIZE) {\n          this.boardSize--;\n          this.sizeInputElement.value = this.boardSize.toString();\n          this.updateSize(this.sizeInputElement.value);\n        }\n        this.toggleButtonStates();\n      });\n      this.increaseButtonElement.addEventListener('click', () => {\n        if (this.boardSize < Settings.MAX_BOARD_SIZE) {\n          this.boardSize++;\n          this.sizeInputElement.value = this.boardSize.toString();\n          this.updateSize(this.sizeInputElement.value);\n        }\n        this.toggleButtonStates();\n      });\n      this.toggleButtonStates();\n    }\n  }\n\n  private initResetButton(): void {\n    this.resetButtonElement.addEventListener('click', () => this.reset());\n  }\n\n  /** Сбрасывает текущего игрока и обнуляет игровую доску */\n  public reset(): void {\n    this.currentPlayer = CellStatus.X;\n    this.board = Array.from({ length: this.boardSize }, () =>\n      Array.from({ length: this.boardSize }, () => CellStatus.EMPTY),\n    );\n    if (this.boardElement) {\n      const cells = DomService.getAllCells();\n      for (const cell of cells) {\n        cell.textContent = '';\n      }\n    }\n    this.boardElement.removeEventListener('mousedown', this.cellClickHandler);\n    this.boardElement.addEventListener('mousedown', this.cellClickHandler);\n\n    this.fillBoardTemplate();\n  }\n\n  /** Заполняет контейнер доски ячейками */\n  private fillBoardTemplate(): void {\n    if (this.boardElement) {\n      this.boardElement.innerHTML = '';\n      this.boardElement.style.gridTemplateRows = `repeat(${this.boardSize}, 1fr)`;\n      this.boardElement.style.gridTemplateColumns = `repeat(${this.boardSize}, 1fr)`;\n      this.boardElement.style.setProperty(\n        '--grid-size',\n        this.boardSize.toString(),\n      );\n      const fragment = document.createDocumentFragment();\n      for (let row = 0; row < this.boardSize; row++) {\n        for (let col = 0; col < this.boardSize; col++) {\n          fragment.append(this.createCellTemplate(row, col));\n        }\n      }\n      this.boardElement.append(fragment);\n    }\n  }\n\n  /** Создание HTML-разметки для одной ячейки */\n  private createCellTemplate(row: number, col: number): HTMLElement {\n    const cellTemplate = document.createElement('div');\n    cellTemplate.classList.add('cell');\n    if (row < this.boardSize - 1) {\n      cellTemplate.classList.add('cell_border-bottom');\n    }\n    if (col < this.boardSize - 1) {\n      cellTemplate.classList.add('cell_border-right');\n    }\n    cellTemplate.dataset.x = row.toString();\n    cellTemplate.dataset.y = col.toString();\n    return cellTemplate;\n  }\n\n  private toggleButtonStates(): void {\n    this.decreaseButtonElement.disabled =\n      this.boardSize <= Settings.MIN_BOARD_SIZE;\n    this.increaseButtonElement.disabled =\n      this.boardSize >= Settings.MAX_BOARD_SIZE;\n  }\n\n  /** Обновление значения размера и сохранение в LocalStorage */\n  private updateSize(newSize: string): void {\n    const parsedSize = Number.parseInt(newSize, 10);\n    if (\n      !Number.isNaN(parsedSize) &&\n      parsedSize >= Settings.MIN_BOARD_SIZE &&\n      parsedSize <= Settings.MAX_BOARD_SIZE\n    ) {\n      this.boardSize = parsedSize;\n      localStorage.setItem('boardSize', this.boardSize.toString());\n      this.reset();\n    }\n  }\n\n  public makeMove(row: number, column: number, target: HTMLElement): boolean {\n    if (\n      row < 0 ||\n      row >= this.boardSize ||\n      column < 0 ||\n      column >= this.boardSize\n    ) {\n      console.error('{Ход выходит за пределы доски}');\n      return false;\n    }\n    if (this.board[row][column] !== CellStatus.EMPTY) {\n      this.modal.showModal('Эта ячейка уже занята');\n      return false;\n    }\n\n    target.textContent = this.currentPlayer;\n    target.classList.add(this.currentPlayer);\n    this.board[row][column] = this.currentPlayer;\n    if (this.checkWinner()) {\n      this.boardElement.removeEventListener('mousedown', this.cellClickHandler);\n      this.saveGameResult(this.currentPlayer);\n      this.modal.showModal(\n        `Игрок ${this.currentPlayer} победил!`,\n        true,\n        this.reset.bind(this),\n      );\n      return true;\n    }\n    if (this.checkDraw()) {\n      this.boardElement.removeEventListener('mousedown', this.cellClickHandler);\n      this.saveGameResult('draw');\n      this.modal.showModal('Ничья', true, this.reset.bind(this));\n      return true;\n    }\n    this.togglePlayer();\n    return false;\n  }\n\n  private checkWinner(): boolean {\n    const winningLine =\n      this.checkHorizontal() ||\n      this.checkVertical() ||\n      this.checkMainDiagonal() ||\n      this.checkSecondDiagonal();\n\n    if (winningLine) {\n      this.highlightWinningCells(winningLine);\n      return true;\n    }\n    return false;\n  }\n\n  private checkDraw(): boolean {\n    return this.board.flat().every((cell) => cell !== CellStatus.EMPTY);\n  }\n\n  private checkLine(line: CellStatus[]): boolean {\n    return line.every((cell) => cell !== CellStatus.EMPTY && cell === line[0]);\n  }\n\n  private checkHorizontal(): [number, number][] | null {\n    for (let row = 0; row < this.boardSize; row++) {\n      if (this.checkLine(this.board[row])) {\n        return this.board[row].map((_, col) => [row, col]);\n      }\n    }\n    return null;\n  }\n\n  private checkVertical(): [number, number][] | null {\n    for (let col = 0; col < this.boardSize; col++) {\n      const cells = this.board.map((row) => row[col]);\n      if (this.checkLine(cells)) {\n        return cells.map((_, row) => [row, col]);\n      }\n    }\n    return null;\n  }\n\n  private checkMainDiagonal(): [number, number][] | null {\n    const mainDiagonal: CellStatus[] = [];\n    for (let index = 0; index < this.boardSize; index++) {\n      mainDiagonal.push(this.board[index][index]);\n    }\n    return this.checkLine(mainDiagonal)\n      ? mainDiagonal.map((_, index) => [index, index])\n      : null;\n  }\n\n  private checkSecondDiagonal(): [number, number][] | null {\n    const secondDiagonal: CellStatus[] = [];\n    for (let index = 0; index < this.boardSize; index++) {\n      secondDiagonal.push(this.board[index][this.boardSize - index - 1]);\n    }\n    return this.checkLine(secondDiagonal)\n      ? secondDiagonal.map((_, index) => [index, this.boardSize - index - 1])\n      : null;\n  }\n\n  private togglePlayer(): void {\n    this.currentPlayer =\n      this.currentPlayer === CellStatus.X ? CellStatus.O : CellStatus.X;\n  }\n\n  private cellClickHandler = (event: Event): void => {\n    event.preventDefault();\n    const target = event.target as HTMLElement;\n    const row = +target.dataset.x!;\n    const col = +target.dataset.y!;\n    this.makeMove(row, col, target);\n  };\n\n  private getSizeFromLocalStorage(): number {\n    const storedSize = localStorage.getItem('boardSize');\n    return storedSize\n      ? Number.parseInt(storedSize, 10)\n      : Settings.MIN_BOARD_SIZE;\n  }\n\n  private saveGameResult(result: string): void {\n    const statsKey = 'gameStatistics';\n    let gameStatistics: string[] = [];\n\n    try {\n      gameStatistics = JSON.parse(localStorage.getItem(statsKey) || '[]');\n    } catch (error) {\n      console.error('Ошибка при парсинге JSON из localStorage:', error);\n      gameStatistics = [];\n    }\n\n    if (gameStatistics.length >= 10) {\n      gameStatistics.shift();\n    }\n\n    if (Array.isArray(gameStatistics)) {\n      gameStatistics.push(result);\n    }\n    localStorage.setItem(statsKey, JSON.stringify(gameStatistics));\n    this.updateStatisticsDisplay(gameStatistics);\n  }\n\n  private getGameStatistics(): string[] {\n    try {\n      return JSON.parse(localStorage.getItem('gameStatistics') || '[]');\n    } catch (error) {\n      console.error('Ошибка при парсинге JSON из localStorage:', error);\n      return [];\n    }\n  }\n\n  private updateStatisticsDisplay(statistics: string[]): void {\n    const statisticsElement = DomService.statistics;\n    if (statisticsElement && Array.isArray(statistics)) {\n      statisticsElement.innerHTML = statistics\n        .map((result, index) => {\n          const resultText =\n            result === 'draw' ? 'Ничья' : `Игрок ${result} победил`;\n          return `${index + 1}. ${resultText}`;\n        })\n        .join('<br>');\n    }\n  }\n\n  private initClearStatisticsButton(): void {\n    this.clearStatisticsBtnElement.addEventListener('click', () =>\n      this.clearStatistics(),\n    );\n  }\n\n  private clearStatistics(): void {\n    localStorage.removeItem('gameStatistics');\n    this.updateStatisticsDisplay([]);\n  }\n\n  private highlightWinningCells(cells: [number, number][]): void {\n    const winClass = `win-cell-${this.currentPlayer}`;\n    cells.forEach(([row, col]) => {\n      const cell = document.querySelector(\n        `.cell[data-x=\"${row}\"][data-y=\"${col}\"]`,\n      );\n      if (cell) {\n        cell.classList.add(winClass);\n      }\n    });\n  }\n}\n","import { DomService } from './dom.service';\n\nexport class Modal {\n  private modal = DomService.modal;\n  private modalCloseButton = DomService.modalCloseButton;\n  private modalButton = DomService.modalButton;\n  private modalMessage = DomService.modalMessage;\n\n  constructor() {\n    this.initModal();\n  }\n\n  private hideModal = (): void => {\n    this.modal.style.display = 'none';\n  };\n\n  private initModal(): void {\n    this.modalCloseButton.addEventListener('click', this.hideModal);\n    window.addEventListener('click', (event) => {\n      if (event.target === this.modal) {\n        this.hideModal();\n      }\n    });\n    window.addEventListener('keydown', (event) => {\n      if (event.key === 'Escape') {\n        this.hideModal();\n      }\n    });\n  }\n\n  public showModal(\n    message: string,\n    endGame?: boolean,\n    callback?: () => void,\n  ): void {\n    this.resetState();\n    this.modalMessage.textContent = message;\n    this.modal.style.display = 'block';\n    this.modalButton.addEventListener('click', this.hideModal);\n\n    if (endGame && callback) {\n      this.modalButton.textContent = 'Новая игра';\n      this.modalButton.addEventListener('click', callback);\n    }\n  }\n\n  private resetState(): void {\n    this.modalButton.textContent = 'OK';\n    const newModalButton = this.modalButton.cloneNode(true) as HTMLElement;\n    this.modalButton.replaceWith(newModalButton);\n    this.modalButton = newModalButton;\n  }\n}\n","export class Settings {\n  public static readonly SELECTOR_BOARD_CONTAINER = '.board-container';\n  public static readonly SELECTOR_CELL = '.cell';\n  public static readonly SELECTOR_RESET_BUTTON = '.reset-button';\n  public static readonly SELECTOR_SIZE_INPUT = '.size-input';\n  public static readonly SELECTOR_DECREASE_BUTTON = '.decrease';\n  public static readonly SELECTOR_INCREASE_BUTTON = '.increase';\n  public static readonly SELECTOR_MODAL = '.modal';\n  public static readonly SELECTOR_MODAL_CLOSE_BUTTON = '.modal-close';\n  public static readonly SELECTOR_MODAL_BUTTON = '.modal-button';\n  public static readonly SELECTOR_MODAL_MESSAGE = '.modal-message';\n  public static readonly SELECTOR_STATISTICS = '.statistics';\n  public static readonly SELECTOR_CLEAR_STATISTICS_BTN =\n    '.clear-statistics-button';\n\n  public static readonly MIN_BOARD_SIZE = 3;\n  public static readonly MAX_BOARD_SIZE = 9;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Game } from './game';\nimport './style.css';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  new Game();\n});\n"],"names":["DomService","getElement","selector","element","document","querySelector","Error","getAllElements","querySelectorAll","boardContainer","Settings","SELECTOR_BOARD_CONTAINER","resetButton","SELECTOR_RESET_BUTTON","sizeInput","SELECTOR_SIZE_INPUT","decreaseButton","SELECTOR_DECREASE_BUTTON","increaseButton","SELECTOR_INCREASE_BUTTON","getAllCells","SELECTOR_CELL","modal","SELECTOR_MODAL","modalCloseButton","SELECTOR_MODAL_CLOSE_BUTTON","modalButton","SELECTOR_MODAL_BUTTON","modalMessage","SELECTOR_MODAL_MESSAGE","statistics","SELECTOR_STATISTICS","clearStatisticsBtn","SELECTOR_CLEAR_STATISTICS_BTN","CellStatus","constructor","Modal","board","currentPlayer","EMPTY","boardElement","resetButtonElement","sizeInputElement","decreaseButtonElement","increaseButtonElement","clearStatisticsBtnElement","cellClickHandler","event","preventDefault","target","row","dataset","x","col","y","this","makeMove","boardSize","getSizeFromLocalStorage","initInputField","initResetButton","initClearStatisticsButton","updateStatisticsDisplay","getGameStatistics","reset","value","toString","addEventListener","MIN_BOARD_SIZE","updateSize","toggleButtonStates","MAX_BOARD_SIZE","X","Array","from","length","cells","cell","textContent","removeEventListener","fillBoardTemplate","innerHTML","style","gridTemplateRows","gridTemplateColumns","setProperty","fragment","createDocumentFragment","append","createCellTemplate","cellTemplate","createElement","classList","add","disabled","newSize","parsedSize","Number","parseInt","isNaN","localStorage","setItem","column","console","error","showModal","checkWinner","saveGameResult","bind","checkDraw","togglePlayer","winningLine","checkHorizontal","checkVertical","checkMainDiagonal","checkSecondDiagonal","highlightWinningCells","flat","every","checkLine","line","map","_","mainDiagonal","index","push","secondDiagonal","O","storedSize","getItem","result","statsKey","gameStatistics","JSON","parse","shift","isArray","stringify","statisticsElement","join","clearStatistics","removeItem","winClass","forEach","hideModal","display","initModal","window","key","message","endGame","callback","resetState","newModalButton","cloneNode","replaceWith","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","r","Symbol","toStringTag","Object","defineProperty","Game"],"sourceRoot":""}